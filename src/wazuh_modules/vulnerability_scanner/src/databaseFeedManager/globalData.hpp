/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * Feb 28, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _GLOBALDATA_HPP
#define _GLOBALDATA_HPP

#include "cacheLRU.hpp"
#include "json.hpp"
#include "singleton.hpp"
#include <memory>
#include <mutex>
#include <shared_mutex>

/**
 * @brief Class to manage global maps data.
 */
class GlobalData final : public Singleton<GlobalData>
{
    mutable std::shared_mutex m_mutex;
    nlohmann::json m_vendorMaps;
    nlohmann::json m_osCpeMaps;
    std::string m_managerName;
    LRUCache<std::string_view, std::string_view> m_translationsL1Cache;
    std::unique_ptr<LRUCache<std::string_view, std::regex>> m_translationsL2Cache;

public:
    /**
     * @brief Set vendor map data.
     * @param vendor Vendor data.
     */
    void vendorMaps(const nlohmann::json& vendor)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_vendorMaps = vendor;
    }

    /**
     * @brief Set OS CPE map data.
     * @param osCpe OS CPE data.
     */
    void osCpeMaps(const nlohmann::json& osCpe)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_osCpeMaps = osCpe;
    }

    /**
     * @brief Set manager name.
     * @param managerName Manager name.
     */
    void managerName(const std::string& managerName)
    {
        m_managerName = managerName;
    }

    /**
     * @brief Get vendor map data.
     * @return vendor map data.
     */
    nlohmann::json vendorMaps() const
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        return m_vendorMaps;
    }

    /**
     * @brief Get OS CPE map data.
     * @return OS CPE data.
     */
    nlohmann::json osCpeMaps() const
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        return m_osCpeMaps;
    }

    /**
     * @brief Get manager name.
     * @return Manager name.
     */
    std::string_view managerName() const
    {
        return m_managerName;
    }

    /**
     * @brief Add a translation entry in the cache.
     *
     * This function allows adding or updating a translation entry in the cache.
     *
     * @param key The key for the translation entry.
     * @param translation The translation corresponding to the key.
     */
    void packageTranslation(const std::string_view& key, const std::string_view& translation)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_translationsL1Cache.insertKey(key, translation);
    }

    /**
     * @brief Retrieve a translation from the cache.
     *
     * This function retrieves a translation from the cache based on the provided key.
     *
     * @param key The key for the translation entry.
     * @return The translation corresponding to the key if found, otherwise an empty string.
     */
    std::string_view packageTranslation(const std::string_view& key)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        return m_translationsL1Cache.getValue(key).value_or("");
    }

    void translationL2Cache(std::unique_ptr<LRUCache<std::string_view, std::regex>> translationsL2Cache)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_translationsL2Cache = std::move(translationsL2Cache);
    }

    std::string_view translationL2Cache(const std::string_view& key)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        // Return the regex or return the corresponding translation?
    }
};

#endif // _GLOBALDATA_HPP
